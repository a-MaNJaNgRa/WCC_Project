const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const PORT = 3000;

// Middleware
app.use(bodyParser.json());
app.use(cors());

// In-memory database for livestock
const livestockList = [];

// Routes

// Get all livestock
app.get('/api/livestock', (req, res) => {
    res.json(livestockList);
});

// Add a new livestock
app.post('/api/livestock', (req, res) => {
    const { name, type, age } = req.body;

    // Validate input
    if (!name || !type || age === undefined || age < 0) {
        return res.status(400).json({ error: 'Invalid data. Name, type, and a non-negative age are required.' });
    }

    const newLivestock = {
        id: livestockList.length + 1, // Auto-increment ID
        name,
        type,
        age,
    };

    livestockList.push(newLivestock);
    res.status(201).json(newLivestock);
});

// Delete a livestock
app.delete('/api/livestock/:id', (req, res) => {
    const { id } = req.params;

    // Find the index of the livestock item
    const index = livestockList.findIndex((item) => item.id === parseInt(id));

    if (index === -1) {
        return res.status(404).json({ error: 'Livestock not found.' });
    }

    // Remove the item
    livestockList.splice(index, 1);
    res.status(200).json({ message: 'Livestock deleted successfully.' });
});

// Update a livestock
app.put('/api/livestock/:id', (req, res) => {
    const { id } = req.params;
    const { name, type, age } = req.body;

    // Find the livestock item
    const livestock = livestockList.find((item) => item.id === parseInt(id));

    if (!livestock) {
        return res.status(404).json({ error: 'Livestock not found.' });
    }

    // Validate and update fields
    if (name) livestock.name = name;
    if (type) livestock.type = type;
    if (age !== undefined && age >= 0) livestock.age = age;

    res.status(200).json(livestock);
});

// Server listener
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
